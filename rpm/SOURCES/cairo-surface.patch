From 7481f6aa82b9ada1bbf76bf57fd6f3b337892be6 Mon Sep 17 00:00:00 2001
From: John Ralls <jralls@ceridwen.us>
Date: Mon, 30 Nov 2020 15:13:41 -0800
Subject: [PATCH] Quartz: Ensure that image data and surface are available to
 draw.

Snapshot the cairo_surface_t and copy the image data to provide to
the CGDataProvider so that it is independent of the cairo_surface_t's
lifetime.

Closes https://gitlab.freedesktop.org/cairo/cairo/-/issues/420

(cherry picked from commit b5e84a97833e8e1d082f4409383b09f9827ada09)
---
 src/cairo-quartz-image-surface.c | 49 +++++++++++++++++++++++---------
 src/cairo-quartz-surface.c       | 15 ++++++++--
 2 files changed, 48 insertions(+), 16 deletions(-)

diff --git a/src/cairo-quartz-image-surface.c b/src/cairo-quartz-image-surface.c
index 84d56c9b4..7d8c71f1a 100644
--- a/src/cairo-quartz-image-surface.c
+++ b/src/cairo-quartz-image-surface.c
@@ -49,11 +49,18 @@
 #define SURFACE_ERROR_INVALID_SIZE (_cairo_surface_create_in_error(_cairo_error(CAIRO_STATUS_INVALID_SIZE)))
 #define SURFACE_ERROR_INVALID_FORMAT (_cairo_surface_create_in_error(_cairo_error(CAIRO_STATUS_INVALID_FORMAT)))
 
+typedef struct {
+    cairo_surface_t *surface;
+    void *image_data;
+} quartz_image_info_t;
+
 static void
 DataProviderReleaseCallback (void *info, const void *data, size_t size)
 {
-    cairo_surface_t *surface = (cairo_surface_t *) info;
-    cairo_surface_destroy (surface);
+    quartz_image_info_t *image_info = (quartz_image_info_t *) info;
+    cairo_surface_destroy (image_info->surface);
+    free (image_info->image_data);
+    free (image_info);
 }
 
 static cairo_surface_t *
@@ -147,24 +154,35 @@ _cairo_quartz_image_surface_flush (void *asurface,
     cairo_quartz_image_surface_t *surface = (cairo_quartz_image_surface_t *) asurface;
     CGImageRef oldImage = surface->image;
     CGImageRef newImage = NULL;
+    quartz_image_info_t *image_info;
 
     if (flags)
 	return CAIRO_STATUS_SUCCESS;
 
     /* XXX only flush if the image has been modified. */
 
-    /* To be released by the ReleaseCallback */
-    cairo_surface_reference ((cairo_surface_t*) surface->imageSurface);
+    image_info = _cairo_malloc (sizeof (quartz_image_info_t));
+    if (unlikely (!image_info))
+	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
+
+    image_info->surface = _cairo_surface_snapshot ((cairo_surface_t*)surface->imageSurface);
+    image_info->image_data = _cairo_malloc_ab (surface->imageSurface->height,
+					       surface->imageSurface->stride);
+    if (unlikely (!image_info->image_data))
+	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
+
+    memcpy (image_info->image_data, surface->imageSurface->data,
+	    surface->imageSurface->height * surface->imageSurface->stride);
 
     newImage = CairoQuartzCreateCGImage (surface->imageSurface->format,
 					 surface->imageSurface->width,
 					 surface->imageSurface->height,
 					 surface->imageSurface->stride,
-					 surface->imageSurface->data,
+					 image_info->image_data,
 					 TRUE,
 					 NULL,
 					 DataProviderReleaseCallback,
-					 surface->imageSurface);
+					 image_info);
 
     surface->image = newImage;
     CGImageRelease (oldImage);
@@ -309,6 +327,7 @@ cairo_quartz_image_surface_create (cairo_surface_t *surface)
     int width, height, stride;
     cairo_format_t format;
     unsigned char *data;
+    quartz_image_info_t *image_info;
 
     if (surface->status)
 	return surface;
@@ -338,20 +357,24 @@ cairo_quartz_image_surface_create (cairo_surface_t *surface)
 
     memset (qisurf, 0, sizeof(cairo_quartz_image_surface_t));
 
-    /* In case the create_cgimage fails, this ref will
-     * be released via the callback (which will be called in
-     * case of failure.)
-     */
-    cairo_surface_reference (surface);
+    image_info = _cairo_malloc (sizeof (quartz_image_info_t));
+    if (unlikely (!image_info))
+	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
+
+    image_info->surface = _cairo_surface_snapshot (surface);
+    image_info->image_data = _cairo_malloc_ab (height, stride);
+    if (unlikely (!image_info->image_data))
+	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
 
+    memcpy (image_info->image_data, data, height * stride);
     image = CairoQuartzCreateCGImage (format,
 				      width, height,
 				      stride,
-				      data,
+				      image_info->image_data,
 				      TRUE,
 				      NULL,
 				      DataProviderReleaseCallback,
-				      image_surface);
+				      image_info);
 
     if (!image) {
 	free (qisurf);
diff --git a/src/cairo-quartz-surface.c b/src/cairo-quartz-surface.c
index f697d157e..2fa376bb8 100644
--- a/src/cairo-quartz-surface.c
+++ b/src/cairo-quartz-surface.c
@@ -784,6 +784,7 @@ typedef struct {
     cairo_surface_t *surface;
     cairo_image_surface_t *image_out;
     void *image_extra;
+    void *image_data;
 } quartz_source_image_t;
 
 static void
@@ -791,6 +792,8 @@ DataProviderReleaseCallback (void *info, const void *data, size_t size)
 {
     quartz_source_image_t *source_img = info;
     _cairo_surface_release_source_image (source_img->surface, source_img->image_out, source_img->image_extra);
+    cairo_surface_destroy (source_img->surface);
+    free (source_img->image_data);
     free (source_img);
 }
 
@@ -830,7 +833,7 @@ _cairo_surface_to_cgimage (cairo_surface_t       *source,
     if (unlikely (source_img == NULL))
 	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
 
-    source_img->surface = source;
+    source_img->surface = _cairo_surface_snapshot (source);
 
     if (source->type == CAIRO_SURFACE_TYPE_RECORDING) {
 	image_surface = (cairo_image_surface_t *)
@@ -853,7 +856,7 @@ _cairo_surface_to_cgimage (cairo_surface_t       *source,
 	}
 
 	source_img->image_out = image_surface;
-	source_img->image_extra = NULL;
+	source_img->image_data = NULL;
 
 	cairo_matrix_init_identity (matrix);
     }
@@ -867,6 +870,12 @@ _cairo_surface_to_cgimage (cairo_surface_t       *source,
 	}
     }
 
+    source_img->image_data = malloc (source_img->image_out->height * source_img->image_out->stride);
+    if (unlikely (!source_img->image_data))
+	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
+
+    memcpy (source_img->image_data, source_img->image_out->data,
+	    source_img->image_out->height * source_img->image_out->stride);
     if (source_img->image_out->width == 0 || source_img->image_out->height == 0) {
 	*image_out = NULL;
 	DataProviderReleaseCallback (source_img,
@@ -877,7 +886,7 @@ _cairo_surface_to_cgimage (cairo_surface_t       *source,
 					       source_img->image_out->width,
 					       source_img->image_out->height,
 					       source_img->image_out->stride,
-					       source_img->image_out->data,
+					       source_img->image_data,
 					       TRUE,
 					       NULL,
 					       DataProviderReleaseCallback,
-- 
GitLab

